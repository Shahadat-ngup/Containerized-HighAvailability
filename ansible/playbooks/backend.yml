---
# Backend playbook - PostgreSQL + Keycloak deployment using existing docker-compose
- name: Deploy Backend Services
  hosts: postgres_cluster
  become: yes
  vars:
    domain_name: "skeycloak.loseyourip.com"
    postgres_password: "SecureKeycloakPass2024"
    admin_password: "SecureKeycloakAdmin2024"
    etcd_token: "etcd-cluster-patroni"
    keepalived_vip_cidr: 23
    interface: "enX0"

  tasks:
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - curl
          - postgresql-client
        state: present
        update_cache: yes

    - name: Install keepalived for DB VIP
      apt:
        name: keepalived
        state: present
        update_cache: yes

    - name: Template keepalived config for DB VIP
      template:
        src: "../templates/keepalived.conf.j2"
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: "0644"
      vars:
        vrrp_instance_name: "DBVIP"
        keepalived_vrid: 51
        keepalived_vip: "172.29.65.100" # Set your DB VIP here

    - name: Restart keepalived for DB VIP
      systemd:
        name: keepalived
        state: restarted
        enabled: yes

    - name: Create backend deployment directory
      file:
        path: /opt/iam-backend
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    - name: Stop and remove existing containers
      shell: |
        # Stop and remove specific containers if they exist
        docker stop etcd-backend{{ postgres_node_id }} patroni-backend{{ postgres_node_id }} keycloak-backend{{ postgres_node_id }} || true
        docker rm etcd-backend{{ postgres_node_id }} patroni-backend{{ postgres_node_id }} keycloak-backend{{ postgres_node_id }} || true
        # Also remove legacy containers with different naming
        docker stop postgres-backend{{ postgres_node_id }} || true
        docker rm postgres-backend{{ postgres_node_id }} || true
      ignore_errors: yes

    - name: Copy Docker Compose configuration from repository
      copy:
        src: "{{ playbook_dir }}/../../docker/backend/docker-compose.yml"
        dest: /opt/iam-backend/docker-compose.yml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
        remote_src: no

    - name: Create .env file for Docker Compose
      copy:
        content: |
          # Backend environment variables for Keycloak + PostgreSQL deployment
          # Node configuration

          # Node identification  
          NODE_ID={{ postgres_node_id }}
          NODE_IP={{ ansible_default_ipv4.address }}

          # Domain and SSL
          DOMAIN_NAME={{ domain_name }}

          # Database credentials
          POSTGRES_DB=keycloak
          POSTGRES_USER=keycloak
          POSTGRES_PASSWORD={{ postgres_password }}
          DB_URL=jdbc:postgresql://{{ ansible_default_ipv4.address }}:5432/keycloak

          # etcd for Patroni
          ETCD_TOKEN={{ etcd_token }}

          # Keycloak admin credentials
          KC_BOOTSTRAP_ADMIN_USERNAME=admin
          KC_BOOTSTRAP_ADMIN_PASSWORD={{ admin_password }}

          # Keycloak configuration
          KC_HTTP_PORT=8080
          KC_LOG_LEVEL=INFO

          # Proxy configuration for nginx
          KC_PROXY_HEADERS=xforwarded
        dest: /opt/iam-backend/.env
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"

    - name: Copy SSL certificates to backend hosts
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode }}"
      loop:
        - src: "{{ playbook_dir }}/../../secrets/.lego/certificates/fullchain.pem"
          dest: /etc/ssl/certs/{{ domain_name }}.pem
          mode: "0644"
        - src: "{{ playbook_dir }}/../../secrets/.lego/certificates/_.skeycloak.loseyourip.com.key"
          dest: /etc/ssl/private/{{ domain_name }}.key
          mode: "0600"
      ignore_errors: yes

    - name: Ensure SSL directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      loop:
        - /etc/ssl/certs
        - /etc/ssl/private

    -

    - name: Start Docker services with rebuild
      shell: |
        cd /opt/iam-backend
        # Clean up completely to avoid cached configuration issues
        docker compose down --remove-orphans --volumes
        docker compose pull
        # Start services with rebuild to ensure configuration changes are applied
        docker compose up -d --build
      register: docker_result

    - name: Show Docker compose output
      debug:
        var: docker_result

    - name: Wait for etcd to be ready
      wait_for:
        port: 2379
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60

    - name: Wait for PostgreSQL to be ready
      wait_for:
        port: 5432
        host: "{{ ansible_default_ipv4.address }}"
        delay: 30
        timeout: 180

    - name: Wait for Keycloak to be ready
      wait_for:
        port: 8080
        host: "{{ ansible_default_ipv4.address }}"
        delay: 60
        timeout: 300

    - name: Check service health
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}{{ item.path }}"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes
      loop:
        - { port: 8080, path: "/health/ready", service: "Keycloak" }

    - name: Display health check results
      debug:
        msg: "{{ item.item.service }}: {{ 'HEALTHY' if item.status == 200 else 'UNHEALTHY' }}"
      loop: "{{ health_check.results }}"
      when: health_check.results is defined

    - name: Display service endpoints
      debug:
        msg: |
          Backend services deployed on {{ ansible_hostname }} ({{ ansible_default_ipv4.address }}):
          - etcd: http://{{ ansible_default_ipv4.address }}:2379
          - PostgreSQL: {{ ansible_default_ipv4.address }}:5432
          - Keycloak: http://{{ ansible_default_ipv4.address }}:8080
          - Admin Console: http://{{ ansible_default_ipv4.address }}:8080/admin
          - Health Check: http://{{ ansible_default_ipv4.address }}:8080/health/ready
