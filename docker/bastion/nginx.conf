user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    # BEGIN ANSIBLE MANAGED NGINX PERFORMANCE TUNING
    worker_connections 4096;
    use epoll;  # Efficient connection processing on Linux
    multi_accept on;  # Accept multiple connections at once
    # END ANSIBLE MANAGED NGINX PERFORMANCE TUNING
}

http {
    # BEGIN ANSIBLE MANAGED HTTP PERFORMANCE TUNING
# Connection optimization
    keepalive_timeout  75;
    keepalive_requests 100;
    client_body_timeout 60;
    send_timeout 60;

    # TCP optimization
    tcp_nopush on;
    tcp_nodelay on;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    # END ANSIBLE MANAGED HTTP PERFORMANCE TUNING
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;

    # Global buffer settings for large headers/cookies
    client_header_buffer_size 16k;
    large_client_header_buffers 8 64k;
    client_max_body_size 100M;

    # BEGIN ANSIBLE MANAGED POSTGRES READ LOAD BALANCING
# PostgreSQL connection pooling (optional advanced setup)
    # This would require pgbouncer deployment - commented for now
    # upstream postgres_read_replicas {
    #     least_conn;
    #     server 172.29.65.52:5432;  # Replica 1
    #     server 172.29.65.53:5432;  # Replica 2
    # }
    # END ANSIBLE MANAGED POSTGRES READ LOAD BALANCING
    upstream keycloak_backend {
        # Enable simple client IP-based stickiness to keep login flow on one node
        ip_hash;
        server 172.29.65.52:8080;
        server 172.29.65.53:8080;
        server 172.29.65.54:8080;
    }

    # Prometheus monitoring services - access via host network
    upstream prometheus_backend {
        server 127.0.0.1:9091;  # Access host-bound prometheus
    }

    upstream grafana_backend {
        server 127.0.0.1:3000;   # Access host-bound grafana
    }

    upstream loki_backend {
        server 127.0.0.1:3100;   # Access host-bound loki
    }

    server {
        listen 80;
        server_name keycloak.ipb.pt;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name keycloak.ipb.pt;

        ssl_certificate /etc/ssl/certs/keycloak.ipb.pt.pem;
        ssl_certificate_key /etc/ssl/private/keycloak.ipb.pt.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://keycloak_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Force https in forwarded proto for correct URL/cookie generation
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Ssl on;
            
            # Keycloak specific headers and buffers
            proxy_buffering off;   # Avoid header/cookie truncation during auth flows
            proxy_buffer_size 128k;
            proxy_buffers 8 256k;
            proxy_busy_buffers_size 256k;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # Cookie and redirect handling
            proxy_cookie_path / /;
            proxy_redirect off;
        }
    }

    # Prometheus with authentication
    server {
        listen 9090;
        server_name _;

        location / {
            auth_basic "Prometheus Authentication";
            auth_basic_user_file /etc/nginx/.prometheus_htpasswd;
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Grafana1 TLS (bastion1)
    server {
        listen 443 ssl;
        server_name grafana1.ccom.ipb.pt;

        ssl_certificate /etc/ssl/certs/grafana1.ccom.ipb.pt.pem;
        ssl_certificate_key /etc/ssl/private/grafana1.ccom.ipb.pt.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Increase buffer sizes for Grafana headers and cookies
        client_max_body_size 100M;
        client_body_buffer_size 1M;
        client_header_buffer_size 8k;
        large_client_header_buffers 8 64k;

        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_buffering off;
            proxy_buffer_size 128k;
            proxy_buffers 100 128k;
            proxy_busy_buffers_size 128k;

            proxy_cookie_path / /;
            proxy_redirect off;
        }
    }

    # Grafana2 TLS (bastion2)
    server {
        listen 443 ssl;
        server_name grafana2.ccom.ipb.pt;

        ssl_certificate /etc/ssl/certs/grafana2.ccom.ipb.pt.pem;
        ssl_certificate_key /etc/ssl/private/grafana2.ccom.ipb.pt.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Increase buffer sizes for Grafana headers and cookies
        client_max_body_size 100M;
        client_body_buffer_size 1M;
        client_header_buffer_size 8k;
        large_client_header_buffers 8 64k;

        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_buffering off;
            proxy_buffer_size 128k;
            proxy_buffers 100 128k;
            proxy_busy_buffers_size 128k;

            proxy_cookie_path / /;
            proxy_redirect off;
        }
    }

    # Loki (on alternative port to avoid conflict with node-exporter)
    server {
        listen 3101;  # Use 3101 to avoid conflict with node-exporter on 9100
        server_name _;

        location / {
            auth_basic "Loki Authentication";
            auth_basic_user_file /etc/nginx/.prometheus_htpasswd;
            proxy_pass http://loki_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Nginx stub_status for metrics (nginx-exporter)
    server {
        listen 8080;
        server_name _;

        location /stub_status {
            stub_status;
            allow 127.0.0.1;
            allow 172.17.0.0/16;  # Allow Docker bridge network
            allow 172.29.0.0/16;  # Allow internal network
            deny all;
        }
    }
}
