server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # =====================================
  # KEYCLOAK LOGS (Most Important!)
  # =====================================
  - job_name: keycloak
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.service=keycloak"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
      - source_labels: ["__meta_docker_container_log_stream"]
        target_label: "stream"
      - source_labels:
          ["__meta_docker_container_label_com_docker_compose_service"]
        target_label: "service"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<level>\w+)\s+\[(?P<category>[^\]]+)\]\s+\((?P<thread>[^\)]+)\)\s+(?P<message>.*)$'
      - labels:
          level:
          category:
      - timestamp:
          format: "2006-01-02 15:04:05,000"
          source: timestamp

  # =====================================
  # POSTGRESQL/PATRONI LOGS
  # =====================================
  - job_name: patroni
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.service=patroni"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
      - source_labels:
          ["__meta_docker_container_label_com_docker_compose_service"]
        target_label: "service"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2},\d+)\s+(?P<level>\w+):\s+(?P<message>.*)$'
      - labels:
          level:
      - timestamp:
          format: "2006-01-02 15:04:05,000"
          source: timestamp

  - job_name: postgresql
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["patroni*", "postgres*"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d+\s+\w+)\s+\[(?P<pid>\d+)\]\s+(?P<level>\w+):\s+(?P<message>.*)$'
      - labels:
          level:

  # =====================================
  # ETCD LOGS
  # =====================================
  - job_name: etcd
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.service=etcd"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
      - source_labels:
          ["__meta_docker_container_label_com_docker_compose_service"]
        target_label: "service"
    pipeline_stages:
      - docker: {}
      - json:
          expressions:
            level: level
            timestamp: ts
            caller: caller
            message: msg
      - labels:
          level:
      - timestamp:
          format: "2006-01-02T15:04:05.000Z0700"
          source: timestamp

  # =====================================
  # NGINX LOGS (Access & Error)
  # =====================================
  - job_name: nginx_access
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.service=nginx"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^(?P<remote_addr>\S+)\s+-\s+(?P<remote_user>\S+)\s+\[(?P<time_local>[^\]]+)\]\s+"(?P<method>\S+)\s+(?P<path>\S+)\s+(?P<protocol>\S+)"\s+(?P<status>\d+)\s+(?P<body_bytes_sent>\d+)\s+"(?P<http_referer>[^"]*)"\s+"(?P<http_user_agent>[^"]*)"'
      - timestamp:
          format: 02/Jan/2006:15:04:05 -0700
          source: time_local
      - labels:
          method:
          status:
          path:
      - match:
          selector: '{status=~"5.."}'
          stages:
            - static_labels:
                alert: nginx_5xx_error

  # =====================================
  # PROMETHEUS & MONITORING STACK
  # =====================================
  - job_name: prometheus
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["prometheus"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^level=(?P<level>\w+)\s+ts=(?P<timestamp>[^\s]+)\s+caller=(?P<caller>[^\s]+)\s+(?P<message>.*)$'
      - labels:
          level:

  - job_name: grafana
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: name
            values: ["grafana"]
    relabel_configs:
      - source_labels: ["__meta_docker_container_name"]
        regex: "/(.*)"
        target_label: "container"
    pipeline_stages:
      - docker: {}
      - regex:
          expression: '^t=(?P<timestamp>[^\s]+)\s+lvl=(?P<level>\w+)\s+msg="(?P<message>[^"]+)"'
      - labels:
          level:

  # =====================================
  # SYSTEM LOGS (Auth, Syslog, Kernel)
  # =====================================
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          host: ${HOSTNAME}
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+)(\[(?P<pid>\d+)\])?\:\s*(?P<message>.*)$'
      - timestamp:
          format: Jan 2 15:04:05
          source: timestamp
      - labels:
          hostname:
          service:

  - job_name: auth
    static_configs:
      - targets:
          - localhost
        labels:
          job: auth
          host: ${HOSTNAME}
          __path__: /var/log/auth.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\S+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+)(\[(?P<pid>\d+)\])?\:\s*(?P<message>.*)$'
      - timestamp:
          format: Jan 2 15:04:05
          source: timestamp
      - labels:
          service:
      - match:
          selector: '{service="sshd"}'
          stages:
            - regex:
                expression: "(?P<event>Failed password|Accepted publickey|Invalid user)"
            - labels:
                event:

  # =====================================
  # DOCKER DAEMON LOGS
  # =====================================
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: ${HOSTNAME}
          __path__: /var/log/docker.log
    pipeline_stages:
      - regex:
          expression: '^time="(?P<timestamp>[^"]+)"\s+level=(?P<level>\w+)\s+msg="(?P<message>[^"]+)"'
      - labels:
          level:
      - timestamp:
          format: RFC3339
          source: timestamp

  # =====================================
  # KEEPALIVED LOGS (Bastion VIP)
  # =====================================
  - job_name: keepalived
    static_configs:
      - targets:
          - localhost
        labels:
          job: keepalived
          host: ${HOSTNAME}
          __path__: /var/log/syslog
    pipeline_stages:
      - match:
          selector: '{job="keepalived"}'
          stages:
            - regex:
                expression: "Keepalived.*(?P<event>Entering MASTER STATE|Entering BACKUP STATE|VRRP.*transition)"
            - labels:
                event:
