---
# Playbook to distribute SSH keys to backend servers through bastions
- name: Distribute SSH keys to backend servers
  hosts: localhost
  gather_facts: no
  vars:
    bastions:
      - "193.136.194.103"
      - "193.136.194.104"
    backends:
      - "172.29.65.52"
      - "172.29.65.53" 
      - "172.29.65.54"
    username: "shahadat"
    
  tasks:
    - name: Read local SSH public key
      slurp:
        src: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub"
      register: ssh_public_key
      
    - name: Copy SSH key to all backend servers through bastion1
      shell: |
        ssh -A -o StrictHostKeyChecking=no {{ username }}@{{ bastions[0] }} \
        "ssh -o StrictHostKeyChecking=no {{ username }}@{{ item }} \
        'mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo \"{{ ssh_public_key.content | b64decode | trim }}\" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'"
      loop: "{{ backends }}"
      ignore_errors: yes
      
    - name: Copy SSH key to all backend servers through bastion2
      shell: |
        ssh -A -o StrictHostKeyChecking=no {{ username }}@{{ bastions[1] }} \
        "ssh -o StrictHostKeyChecking=no {{ username }}@{{ item }} \
        'mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo \"{{ ssh_public_key.content | b64decode | trim }}\" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'"
      loop: "{{ backends }}"
      ignore_errors: yes
      
    - name: Test connectivity from bastion1 to all backends
      shell: |
        ssh -A -o StrictHostKeyChecking=no {{ username }}@{{ bastions[0] }} \
        "ssh -o StrictHostKeyChecking=no {{ username }}@{{ item }} 'echo \"Bastion1 -> {{ item }}: SUCCESS\"'"
      loop: "{{ backends }}"
      ignore_errors: yes
      register: bastion1_test
      
    - name: Test connectivity from bastion2 to all backends  
      shell: |
        ssh -A -o StrictHostKeyChecking=no {{ username }}@{{ bastions[1] }} \
        "ssh -o StrictHostKeyChecking=no {{ username }}@{{ item }} 'echo \"Bastion2 -> {{ item }}: SUCCESS\"'"
      loop: "{{ backends }}"
      ignore_errors: yes
      register: bastion2_test
      
    - name: Display bastion1 connectivity results
      debug:
        msg: "{{ item.stdout }}"
      loop: "{{ bastion1_test.results }}"
      when: item.stdout is defined
      
    - name: Display bastion2 connectivity results
      debug:
        msg: "{{ item.stdout }}"
      loop: "{{ bastion2_test.results }}"
      when: item.stdout is defined
      
    - name: Test connectivity to all hosts
      shell: ansible all -i ansible/inventory/hosts -m ping
      register: ping_result
      
    - name: Display connectivity test results
      debug:
        var: ping_result.stdout_lines
